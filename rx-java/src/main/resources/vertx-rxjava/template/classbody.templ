	@if{concrete && type.params.empty}
	  public static final io.vertx.lang.rxjava.TypeArg<@{type.simpleName}> arg = new io.vertx.lang.rxjava.TypeArg<>(\n
	    obj -> new @{type.simpleName}((@{type.name}) obj),\n
	    @{type.simpleName}::getDelegate\n
	  );\n
	\n
	@end{}
	  final @{helper.getNonGenericType(ifaceFQCN)} delegate;\n
	@foreach{typeParam:type.params}
	  private io.vertx.lang.rxjava.TypeArg<@{typeParam.name}> typeArg_@{typeParam.name};\n
	@end{}
	  \n
	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate) {\n
	@if{concrete && concreteSuperType != null}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	@foreach{typeParam:type.params}
	    this.typeArg_@{typeParam.name} = io.vertx.lang.rxjava.TypeArg.unknown();\n
	@end{}
	  }\n\n
	@if{type.params.size() > 0}
	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate@foreach{typeParam:type.params}
		, io.vertx.lang.rxjava.TypeArg<@{typeParam.name}> typeArg_@{typeParam.name}
		@end{}) {\n
	@if{concrete && concreteSuperType != null}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	@foreach{typeParam:type.params}
	    this.typeArg_@{typeParam.name} = typeArg_@{typeParam.name};\n
	@end{}
	  }\n\n
	@end{}

	  public @{type.name} getDelegate() {\n
	    return delegate;\n
	  }\n\n

	@if{type.raw.readStream}
		@code{streamType=type.raw.readStreamArg}
  private rx.Observable<@{streamType.simpleName}> observable;\n\n

  public synchronized rx.Observable<@{streamType.simpleName}> toObservable() {\n
    if (observable == null) {\n
		@if{streamType.kind == CLASS_API}
      java.util.function.Function<@{streamType.raw.name}, @{streamType.simpleName}> conv = @{streamType.raw.simpleName}::newInstance;\n
      io.vertx.lang.rxjava.ReadStreamAdapter<@{streamType.raw.name}, @{streamType.simpleName}> adapter = new io.vertx.lang.rxjava.ReadStreamAdapter<>(this, conv);\n
      observable = rx.Observable.create(adapter);\n
		@else{}
      observable = io.vertx.rx.java.RxHelper.toObservable(this.getDelegate());\n
		@end{}
    }\n
    return observable;\n
  }\n\n
	@end{}

	@foreach{method:methods}
		@includeNamed{'genMethod'}
	@end{}

	@foreach{method:methods}
		@code{overloaded = overloadedMethod(method)}
		@if{overloaded != null}
			@includeNamed{'genMethod';method=overloaded}
		@end{}
	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}
